import java.io.IOException;
import java.io.StringWriter;
import java.time.Instant;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

public class InstantTypeAdapterTest {

    private Gson gson;
    private InstantTypeAdapter instantTypeAdapter;

    @BeforeEach
    public void setUp() {
        instantTypeAdapter = new InstantTypeAdapter();
        gson = new GsonBuilder().registerTypeAdapter(Instant.class, instantTypeAdapter).create();
    }

    @Test
    public void testSerialize() throws IOException {
        Instant now = Instant.now();
        String json = gson.toJson(now, Instant.class);

        // Use JsonWriter for more precise testing
        StringWriter stringWriter = new StringWriter();
        JsonWriter jsonWriter = new JsonWriter(stringWriter);
        instantTypeAdapter.write(jsonWriter, now);
        jsonWriter.close();

        assertEquals(stringWriter.toString(), json);
    }

    @Test
    public void testDeserialize() {
        Instant now = Instant.now();
        String json = gson.toJson(now, Instant.class);
        Instant parsedInstant = gson.fromJson(json, Instant.class);
        assertEquals(now, parsedInstant);
    }

    @Test
    public void testDeserializeInvalidFormat() {
        String invalidJson = "\"invalid-instant\"";
        assertThrows(JsonSyntaxException.class, () -> gson.fromJson(invalidJson, Instant.class));
    }
}

import com.google.gson.Gson;
import org.junit.jupiter.api.Test;
import java.time.Instant;

import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class GsonConfigurationTest {

    @Test
    public void testCreateGson() {
        Gson gson = GsonConfiguration.createGson();
        assertNotNull(gson);

        Instant now = Instant.now();
        String json = gson.toJson(now);
        assertNotNull(json);

        Instant parsedInstant = gson.fromJson(json, Instant.class);
        assertNotNull(parsedInstant);
        assertTrue(now.equals(parsedInstant));
    }
}
